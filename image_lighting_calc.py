# -*- coding: utf-8 -*-
"""Image-lighting-calc.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UQ2-Ilxeu-FUiofEPpdRZqWS_K3b3CW4

## Imports
"""

#import dependencies
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os, cv2
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

image_folder = '/content/drive/MyDrive/all-images'

#calculate the score value of an image (based on perception & shadow vs highlight)
def calc_weighted_sum(image):
    lab = cv2.cvtColor(image, cv2.COLOR_BGR2LAB)
    l = lab[:, :, 0].astype(np.float32)/255
    perception = l.mean()
    shadow     = (l < 0.15).mean() #the avg l-values of the number of pixels w/l value < 15%
    highlight  = (l > 0.85).mean() #the avg l-values of the number of pixels w/l value > 85%
    score = perception - shadow + highlight #-1(dark) ---- 1(bright)
    indication = 0
    if score > 0.5:
        indication = 2
    elif score > -0.05:
        indication = 1
    else:
        indication = 0
    return perception, shadow, highlight, score, indication

#Writing lighting values of each file to a dictionary
import csv
data = [] #to-be a dictionary containing info to store in csv
def write_dict(filename):
      img = cv2.imread(os.path.join(image_folder, filename)) #reads the image from filename
      if img is not None:
        size = img.shape #(px, px, color channel)
        perception, shadow, highlight, score, indication = calc_weighted_sum(img)
        data.append(
            {'Filename': filename, 'Size': size, 'Perception': perception, 'Shadow': shadow, 'Highlight': highlight, 'Score': score, 'Indication': indication}
        )

      else:
        print(f"Warning: Could not read image file: {filename}")
      return data

#Creating a new csv file
def create_csv(filename, dictionary, *fieldnames):
  with open(filename, 'w', newline='') as csvfile: #new csv file
      fieldnames = [*fieldnames] #columns
      writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
      writer.writeheader()
      writer.writerows(dictionary)

  df = pd.read_csv(filename)
  print(df.to_string()) #prints the csv file

#plotting some of images below the csv for reference
def plot_images(image_folder):
  # Get the list of image filenames from the folder
  image_files = [f for f in os.listdir(image_folder) if os.path.isfile(os.path.join(image_folder, f))]
  images_to_plot = image_files[0:10]
  # Create subplots based on the number of images to plot
  # Using a single row and multiple columns for better visualization of landscape images
  num_images = len(images_to_plot)
  fig, axes = plt.subplots(1, num_images, figsize=(10, 10)) # Increased figsize for better display
  if num_images == 1:
      axes = [axes]

  for i in range(num_images):
    img_path = os.path.join(image_folder, images_to_plot[i])
    img = cv2.imread(img_path)
    if img is not None:
        # OpenCV reads images in BGR, matplotlib expects RGB
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        axes[i].imshow(img)
        axes[i].set_title(i)   #shows labels on top of images
        axes[i].axis('off')
    else:
        print(f"Could not read image file: {images_to_plot[i]}")

  plt.tight_layout() # Adjust layout to prevent titles overlapping
  plt.show()

def main():
  for filename in os.listdir(image_folder): #iterates through each file in the drive folder
    write_dict(filename)
  create_csv('image-lightings.csv', data,'Filename', 'Size', 'Perception', 'Shadow', 'Highlight', 'Score', 'Indication')
  plot_images(image_folder)

if __name__ == '__main__':
  main()